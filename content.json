{"pages":[{"title":"關於我 About Me","text":"澳門人碩士研究生研究方向： Convolutional Neural Network Generative Adversarial Network Image processing Image classification 興趣： 寫廢Code 空中浩劫 LOL osu! 旅行 耳機 攝影 機械鍵盤 電腦硬件 MacaneseGraduate studentResearch Interests: Convolutional Neural Network Generative Adversarial Network Image processing Image classification Interests: Programming Mayday (Canadian documentary television program) League of Legends osu! Traveling Earphones Photography Mechanical Keyboards Computer Hardware","link":"/blog/about/index.html"},{"title":"Profile","text":"Chak Fong Chong PhD Candidate in Computer Applied Technology(Under supervision of Dr. Yapeng Wang and co-supervision of Prof. Wei Ke)Macao Polytechnic UniversityMacao SAR, China chakfong.chong@mpu.edu.mo (Primary)chakfong.chong@gmail.comp1604994@ipm.edu.mo Education 2022 ~ NowPhD Candidate in Computer Applied Technology, Macao Polytechnic University (GPA 3.56/4.00) 2020 ~ 2022MSc in Big Data and Internet of Things, Macao Polytechnic University (GPA 3.78/4.00, Distinction) 2016 ~ 2020BSc in Computing, Macao Polytechnic Institute (GPA 3.58/4.00) Publications Image projective transformation rectification with synthetic data for smartphone-captured chest X-ray photos classificationChak Fong Chong, Yapeng Wang, Benjamin Ng, Wuman Luo, Xu Yang*Computers in Biology and Medicine, Elsevier. September 2023. IF=7.7, JCR Q1. Category-Wise Fine-Tuning for Image Multi-label Classification with Partial LabelsChak Fong Chong, Xu Yang*, Tenglong Wang, Wei Ke, Yapeng Wang2023 International Conference on Neural Information Processing (ICONIP). CCF-C. GAN-based Spatial Transformation Adversarial Method for Disease Classification on CXR Photographs by SmartphonesChak Fong Chong, Xu Yang, Wei Ke, Yapeng Wang2021 Digital Image Computing: Techniques and Applications (DICTA). Enhancing Classification Performance in Knee Magnetic Resonance Imaging Using Adversarial Data AugmentationZhongbo Yan, Xu Yang, Chak Fong Chong, Yapeng Wang2023 IEEE 14th International Conference on Software Engineering and Service Science (ICSESS) Clustering Algorithms based Noise Identification from Air Pollution Monitoring DataXinyi Fang, Chak Fong Chong, Xu Yang, Yapeng Wang2022 IEEE Asia-Pacific Conference on Computer Science and Data Engineering (CSDE) Achievements State-of-the-art Performance on the CheXpert chest X-ray classification competition dataset State-of-the-art Performance and #1 on the CheXphoto smartphone-captured photos of chest X-ray classification competition dataset Social Contribution Session ChairThe 2023 International Conference on Neural Information Processing (ICONIP)Changsha, China. November 20-23, 2023. Program Link Teaching Experiences Interest Group Lecturer2023/2024 Artificial Intelligence Interest Group for BSc Students Teaching Assistant2023/2024 COMP214-211/212 Computer Networks, Macao Polytechnic University Teaching Assistant2022/2023 COMP224-211/212 Database Management Systems, Macao Polytechnic University Teaching Assistant2022/2023 COMP214-211/212 Computer Networks, Macao Polytechnic University Teaching Assistant2021/2022 COMP224-211/212 Database Management Systems, Macao Polytechnic University Working Experience Research Assistant (May 2021 ~ June 2022)Research Project “Multi-Label Chest X-ray Image Classification with Deep learning Techniques on Smart Phones” (Project PI: Dr. Xu Yang)Macao Polytechnic University Selected Scholarships 2022 ~ 2025Bolsa de Estudo Dr. Ho Chun. Macao Polytechnic University 2020 ~ 2022Bolsas de Mérito de Pós-Graduados. DSES, Macao SAR, China 2018 ~ 2020Bolsas de Estudo para o Ensino Superior: Bolsas de mérito. DSEJ, Macao SAR, China","link":"/blog/profile/index.html"}],"posts":[{"title":"把blog重建了一下..","text":"剛換成新電腦，舊電腦裡的hexo沒備份，只能重頭再來了..","link":"/blog/2020/06/06/%E6%8A%8Ablog%E9%87%8D%E5%BB%BA%E4%BA%86%E4%B8%80%E4%B8%8B/"},{"title":"天氣站-初號機功耗測試","text":"今天來測一測一顆碱性9v電池能夠運行初號機多久。 其實這個測試在昨天凌晨就開始了，目的是為了確定9v電池的續航時間，希望能維持最少三天。而現在第一天過去了，目前一切正常，初號機仍正常運作中。 這是過去24小時初號機錄得房間的温濕度，紅色線代表温度，藍色線是相對濕度，粉紅色是酷熱指數(Heat Index)，而淺藍色則為露點温度。 可以看出我房間在不開冷氣的時候濕度很高，快直接90%了。那時的露點温度也很接近室温，再加上牆壁比較冷，牆壁的温度可能已經低過露點温度了，可能這就是我房間很濕的原因？ 第二天結果出來了，在早上7點左右沒再發出數據，結果是9v電池能維持1天又6小時左右，離目標還差很遠。","link":"/blog/2020/06/07/%E5%A4%A9%E6%B0%A3%E7%AB%99-%E5%88%9D%E8%99%9F%E6%A9%9F%E5%8A%9F%E8%80%97%E6%B8%AC%E8%A9%A6/"},{"title":"天氣站-初號機完成","text":"今天沒事做，推一下這個Project的進度。之前在面包板上試驗了NodeMCU和DHT11傳感器，現在把它焊到萬能板上。 初號機使用9v電池進行供電，由於NodeMCU只接受5v或3.3v供電，所以要加一個降壓模塊，這次使用的是3.3v輸出。這個模塊的好處是不用調輸出電壓，固定3.3v輸出, 而且輸入電壓範圍也不錯。 測試電路沒問題之後就把DHT11換成DHT22傳感器。相比起DHT11, DHT22測量的誤差更少，更準確，但也貴很多…Orz。 也把程序換成DHT22的。 最後就是接上電池，讓它在房間一角獨自運行lol。 初號機完成。現在的問題是，一顆電池能把這家伙運行多久，畢竟NodeMCU也不是吃素的。如果太短的話，還要想辦法把它拉長，畢竟做這東西出來的原意是測量室外的温濕度的。可能換4到6顆AA電之類的？","link":"/blog/2020/06/06/%E5%A4%A9%E6%B0%A3%E7%AB%99-%E5%88%9D%E8%99%9F%E6%A9%9F%E5%AE%8C%E6%88%90/"},{"title":"泰國旅行隨影","text":"旅行時間: 2019年6月14日 - 6月19日從京都回來後隔日又去曼谷lol，hea~這次沒有拍什麼照，隨便放了 一間樓上舖的居酒屋いもや，超級奇怪的位置，但是味道很好，絕對有日本本地水準，也有日本人在吃。(明明剛從京都回來，竟然在泰國又吃居酒屋…) 酒店窗景。這次住的是在Phrom Phong站的Hilton。 酒店附近的榮泰米湯粉，很有名，也非常好吃，便宜，好像吃了三次。 Siam站的Ban Khun Mae，吃過幾次了，味道不錯。 Chit Lom站附近的Burger &amp; Lobster，沒得去英國，在這裡吃了。Combo for one 套餐，價值一枚B&amp;L幣。 紅大哥水門雞飯，這次去的是分店，有冷氣。 其它相片","link":"/blog/2020/06/22/%E6%B3%B0%E5%9C%8B%E6%97%85%E8%A1%8C%E9%9A%A8%E5%BD%B1/"},{"title":"在Html中用Canvas實現用圖片作為指針的動畫","text":"這篇是關於我的其中一個小作品watch(Github)的一個難點的解決方法。 首先看看這個作品的Demo。 再看看第一作的效果。 敝除代碼重構的分別外，第一作與現在的分別就是第一作用一條線代表指針，而現在用一張圖片代表指針。用圖片代表指針在實現難度上大了許多，這也是本作品其中一個難點。 先看看原作我是如何畫一個指針： class Hand{ constructor(x, y, length, degree){ this.x = x; //指針的轉軸位置 this.y = y; //指針的轉軸位置 this.length = length; //指針長度 this.degree = (degree+360) % 360; //指針的指向角度 this.color = &quot;#000000&quot;; } draw(ctx){ var xp = this.x + Math.cos(this.degree * Math.PI / 180) * this.length; //指尖位置 var yp = this.y - Math.sin(this.degree * Math.PI / 180) * this.length; //指尖位置 ctx.color = this.color; ctx.beginPath(); ctx.moveTo(this.x, this.y); ctx.lineTo(xp, yp); ctx.stroke(); } }這是指針的Class，畫這個指針方法就是draw(ctx)了。具體實現非常簡單，已知指針的轉軸位置x, y，長度length，與x軸夾角(逆時針正)degree，求指針的指尖位置x', y'即可。方法也就是中學數學就能做到。 $x’= x + \\cos (degree) \\times length$$y’= y - \\sin (degree) \\times length$ 先說明一下坐標軸的方向。y的方向是和canvas相反的，所以是減號。自於為什麼要相反，要問問兩年前的我了Orz。而度數則從x軸開始逆時針為正 求到x', y'後，再用canvas中的ctx劃線段即可： ctx.beginPath(); ctx.moveTo(this.x, this.y); ctx.lineTo(xp, yp); ctx.stroke();這樣就劃完一條指針了，很簡單吧。然而當要用圖片代替線段時，是另一個世界了。 首先看看ctx是供什麼方法畫圖片。 ctx.drawImage(image, x, y);這個方法就能在canvas上畫一張圖，其中x, y參數代表圖左上角的位置。 現在能畫圖片了，還差令圖片旋轉，怎麼做呢？ctx有這個方法： ctx.rotate(angle);大概就是把畫布旋轉了再畫，用了這個方法以後畫什麼都是旋轉了的。 另外還需要ctx.translate(x, y)把畫筆平移。 這樣大概就能把指針顯示成圖片了，大概。首先先寫個大概： ctx.translate(x, y); ctx.rotate(-this.degree * Math.PI / 180); ctx.drawImage(this.image, 0,0, this.length, this.width); ctx.rotate(this.degree * Math.PI / 180); ctx.translate(-x, -y);以上大概就是首先畫ctx偏移到指針的x, y，然後旋轉角度(因為y軸相反了，所以是負的)，再以x, y為起點畫圖，然後因為需要畫下一幀，所以把ctx復原。但這樣寫的效果是如下圖，然而現實中的指針並不是這樣轉的。 而我們對指針的認知通常是這個，指針圖片應該沿著某一個中心轉動。 可惜的是ctx沒有方法可以實現，所以這就要自己解決了。 首先我們在canvas上要畫一張圖，需要確定它左上角的座標。同樣地，要實現指針轉動，我還是需要求出那個左上角的位置，而且還是轉動了後的左上角位置。 怎樣求呢，出動我的中學數學！首先把指針圖片的參數都定義先。 length: 圖片的長度，已知 width: 圖片的寛度，已知 x, y: 圖片中心轉軸的位置，已知 cx, cy: 分別為中心轉軸離圖片左方和上方的距離，已知 degree: 圖片的旋轉角度，沒寫在圖裡，已知 x', y': 圖片左上角的位置 dg: 中心轉軸到左上角的距離 ɣ: dg和cx的夾角 定義好了，然後再分析一下。 這樣就明較明顯了，和用線段代表指針時的求指尖位置一樣，有了角度和距離，就能求出左上角的位置，而這次的角度為β，距離為dg。先把求x', y'的公式列出來： $x’= x + \\cos (β) \\times dg$$y’= y - \\cos (β) \\times dg$ 觀察上圖，可知$β$： $β = 180° - ɣ + degree$ 而$ɣ$則可以用$\\tan^{-1}$求出： $ɣ = \\tan^{-1} (\\frac{cy}{cx} )$ 而距離$dg$，則可以用勾股定理： $dg = \\sqrt{cx^2+cy^2} $ 然後就可以把所以東西代進公式了： $x’ = x + \\cos (180° - \\tan^{-1} (\\frac{cy}{cx} ) + degree) \\times \\sqrt{cx^2+cy^2}$ $y’ = y - \\sin (180° - \\tan^{-1} (\\frac{cy}{cx} ) + degree) \\times \\sqrt{cx^2+cy^2}$ 然後化簡，$180°$去掉改符號，再調位置： $x’ = x - \\cos ( degree - \\tan^{-1} (\\frac{cy}{cx} )) \\times \\sqrt{cx^2+cy^2}$ $y’ = y + \\sin ( degree - \\tan^{-1} (\\frac{cy}{cx} )) \\times \\sqrt{cx^2+cy^2}$ 公式有了，那麼最後實現也不難了。跟據x', y'和degree畫出圖片即可。參數名有點奇怪，揍合看吧。本來的draw(ctx)改名成了render(ctx)，而offsetX, offsetY則只是解實現的問題，不太需要理會。 class ImageHand extends Hand{ constructor(config){ super(config); this.image = new Image(this.length, this.width); this.image.src = config.image.src; this.handcenter = {}; this.handcenter.x = blablabla; //cx this.handcenter.y = blablabla; //cy this.dgOffset = Math.sqrt(Math.pow(this.handcenter.x, 2) + Math.pow(this.handcenter.y, 2)); //dg this.gamma = Math.atan(this.handcenter.y / this.handcenter.x) * 180 / Math.PI; //gamma } render(ctx, offsetX, offsetY){ let x = this.x + offsetX; //中心位置 let y = this.y + offsetY; //中心位置 //dg已預先求好 let gOffsetX = x-Math.cos((this.degree-this.gamma) * Math.PI / 180) * this.dgOffset; //左上角 let gOffsetY = y+Math.sin((this.degree-this.gamma) * Math.PI / 180) * this.dgOffset; //左上角 //開畫 ctx.translate(gOffsetX, gOffsetY); ctx.rotate(-this.degree * Math.PI / 180); ctx.drawImage(this.image, 0,0, this.length, this.width); ctx.rotate(this.degree * Math.PI / 180); ctx.translate(-gOffsetX, -gOffsetY); } }結束~","link":"/blog/2020/06/22/%E5%9C%A8Html%E4%B8%AD%E7%94%A8Canvas%E5%AF%A6%E7%8F%BE%E7%94%A8%E5%9C%96%E7%89%87%E4%BD%9C%E7%82%BA%E6%8C%87%E9%87%9D%E7%9A%84%E5%8B%95%E7%95%AB/"},{"title":"測試兩個矩形是否重疊的方法","text":"如題。 首先我們需要定義矩形的參數，作為會寫JavaScript的我，直接定義個class比較直接簡便。 class Rectangle{ constructor(x, y, width, height){ this.x = x; //矩形的左上角坐標 this.y = y; //矩形的左上角坐標 this.width = width; //矩形從左到右的長度 this.height = height;//矩形從上到下的長度 } } 在說明矩形的方法之前，把先問題簡化成更簡單的問題解答總會更好(3B1B)。矩形是二維的，那麼先從一維開始吧，而一維的代表就是線段，所以以下先說明如何判斷在一維空間下兩條線段是否重疊。 一維空間下只有x, 沒有y，不用擔心線段會飛來飛去(X)。先定義一條線段： class Line{ constructor(x1, length){ this.x = x; this.length = length; } }設這個一維空間的x方向為左到右由小到大，那麼Line.x則是線段左邊的點，而length則是線段的長度。 下圖表示的是一條線段在一維空間中。 現在想像有多一條線段在這個空間中，那麼這條線段可能出現在那裡呢？在左邊，在右邊？還是重疊了？下邊列舉了所有可能性。 在左邊，不重疊 在右邊，不重疊 在左邊，重疊 在右邊，重疊 在裡面，重疊 原線段在裡面，重疊 看似挺多情況，但現在只需要判斷的是兩條線是否重疊，換句話說，只需判斷兩條線段的位置是否符合1和2即可。 f(n1, n2){//線段1, 2 if(n2.length+n2.x &lt; n1.x || n1.length+n1.x &lt; n2.x){ //case 1 or 2 return false; //不重疊 } else { return true;//重疊 } } 現在回去看看二維的情況。二維即是兩個矩形，其實只是一維情況加多一點點。 想像一下，兩條線段即可代表一個矩形，一邊是x軸，一邊是y軸而已。那麼，用一維的方向判斷一下x軸和y軸的線段不就可以了嗎？只要兩組線段同時符合，那麼兩個矩形便是重疊了。 再借用上方的判斷式寫矩形的判斷式。 g(r1, r2){//矩形1, 2 let r1x = new Line(r1.x, r1.width);//矩形1的x軸線段 let r1y = new Line(r1.y, r1.height);//矩形1的y軸線段 let r2x = new Line(r2.x, r2.width);//矩形2的x軸線段 let r2y = new Line(r2.y, r2.height);//矩形2的y軸線段 if(f(r1x, r2x) &amp;&amp; f(r1y, r2y)){ //如果兩組線段都重疊 return true; //則兩矩形重疊 } else { return false; } }","link":"/blog/2020/06/24/%E6%B8%AC%E8%A9%A6%E5%85%A9%E5%80%8B%E7%9F%A9%E5%BD%A2%E6%98%AF%E5%90%A6%E9%87%8D%E7%96%8A%E7%9A%84%E6%96%B9%E6%B3%95/"},{"title":"基於深度學習實現動漫圖片超解析度成像","text":"想起了waifu2x的動漫圖片超解析度成像，自己又學過一點CNN的知識，決定嘗試做一個自己的。 Super-Resolution就是把圖片放大啦。傳統方法效果一般，所以近年興起了使用DL來實現。 Dataset數據集使用 Danbooru2019，過百萬張圖片。分成原始圖片和處理過的512px圖片兩個數據集，兩者都有用過不過偏向使用原始圖片的，因為較能保存細節。 Methods首先試實現了SCRNN [2]，效果並不好。 SCRNN 就是使用3層Conv2D來實現了，並不算是DL。 然後是使用了EDSR [1]，效果不錯。 Implementation使用Keras實現，SCRNN 和 EDSR 兩篇論文都沒仔細看完，就大概地重做一下。 Training Data Processing 先從dataset裡挑出大於1024*1024解像度的圖片，並用這些圖片作為training data的材料，因較大解像度圖片通常較少壓縮，質量較高。 把每張圖片隨機crop幾個較小的正方形圖片，作為Y。 把每個Y先張它用BICUBIC縮少成原圖1/2，再用BICUBIC放大成原圖大小，作為X。這時X和Y一樣解像度但X較模糊。 拿X和Y來訓練模型 Training使用Adam, lr=各種亂試，中途不斷切換lr，沒定值(做來只是玩玩的)。Batch size 12, 24, 32等等，loss 使用 MSE, metric 使用 PSNR = 10lg(MAX^2/MSE)。並沒有使用全部數據集，電腦受不起，而且不需要。 Result被測試對象，荻pote老師的新圖。(放大較能看結果) 左原圖，經PS放大；中我訓練的模型；右waifu2x 我訓練的模型已達到消除鋸齒的效果，但和waifu2x相比依然差不少，肉眼就能看出差別。 Further Work繼續努力。 References[1] Lim, B., Son, S., Kim, H., Nah, S., &amp; Mu Lee, K. (2017). Enhanced deep residual networks for single image super-resolution. In Proceedings of the IEEE conference on computer vision and pattern recognition workshops (pp. 136-144). [2] Dong, C., Loy, C. C., He, K., &amp; Tang, X. (2015). Image super-resolution using deep convolutional networks. IEEE transactions on pattern analysis and machine intelligence, 38(2), 295-307.","link":"/blog/2020/08/26/%E5%9F%BA%E6%96%BC%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92%E5%AF%A6%E7%8F%BE%E5%8B%95%E6%BC%AB%E5%9C%96%E7%89%87%E8%B6%85%E8%A7%A3%E6%9E%90%E5%BA%A6%E6%88%90%E5%83%8F/"},{"title":"工作環境","text":"工作的地方就是自己的房間，上圖： 桌子是IKEA的BEKANT(140x60)，IKEA一般來說品質普通，但這款是辦公室用桌子，鋼底座，很穩固，而且有十年保用，很不錯。 屏幕分別是Dell U2417H (左) 和 Gigabyte G34WQC (右)。 Dell的是普通24吋1080p 60Hz 屏幕，但顏色很好，用了三年多，已經有點壞了。 Gigabyte的是34吋21:9寛屏幕，2K 144Hz 曲面，比較適合打遊戲。買之前會覺得帶魚屏比較難適應，後來發現，用了之後真的回不去了…。分屏後左右兩邊都夠寛，已經可以當雙屏用了。 鍵盤則是Keydous NJ80，新開售的80%鍵盤，有RGB, 熱插拔，TTC分粉軸，銅定位板，真香。沒了鍵盤右邊的垃圾鍵後碼字舒服了很多，就是輸入數字有點麻煩。 麥克風是Blue Iceball Ice，連淘寶買的支架，不是用來直播或者唱歌的，而是用來語音的。 耳機和USB DAC分別是 Final Audio A3000 和 xduoo Link 2。 繪圖板是八年前的Wacom CTL-471，是我現有的最久的外設，有點壞了，但捨不得換。不是用來fafa的，而是用來osu!的:P。 主機則有兩台，第一台現役中，另一台在吃灰。 主機1: AMD Ryzen 7 3700x Gigabyte X570 I Aorus Pro Wifi Kingston HyperX Fury DDR4-3200 16Gx2 Gigabyte RTX 2060 Super Windforce OC 8G WD SN750 1TB M.2 Nvme WD Blue 3D Nand 1TB M.2 Sata CORSAIR SF600 Platinum CoolerMaster NR200P Windows 10 Pro 主機2: Intel i5-6500 ASROCK H110M-HDS DDR4-2133 8Gx2 GTX 750ti HIKVISION C200 1TB SSD FSP MS500 Sunmilo C01s ITX Case Linux Mint 19.3 Cinnamon","link":"/blog/2021/08/28/%E5%B7%A5%E4%BD%9C%E7%92%B0%E5%A2%83/"},{"title":"CheXphoto Competition","text":"This post is just a place to record my work in CheXphoto competition. 25 August 2021I thought the competition was abandoned because the ranking has not been published for a year. And today I see the competition is started. And CXR films become test photos?? My model is designed for photographs. Well, just submit and see the score. 26 August 2021The model submitted yesterday has some problem. Today I am gonna resubmit it again. I upload the model on Codalab and waiting for the prediction bundle. After 3 hours, the bundle is still not being run… I found that the GPU resources is lacked. I changed it to be run on CPU. 31 August 2021Yoooooo. My model gets the 1st place!!","link":"/blog/2021/09/02/CheXphoto-Competition/"}],"tags":[{"name":"旅行","slug":"旅行","link":"/blog/tags/%E6%97%85%E8%A1%8C/"},{"name":"天氣站","slug":"天氣站","link":"/blog/tags/%E5%A4%A9%E6%B0%A3%E7%AB%99/"},{"name":"曼谷","slug":"曼谷","link":"/blog/tags/%E6%9B%BC%E8%B0%B7/"},{"name":"深度學習","slug":"深度學習","link":"/blog/tags/%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92/"},{"name":"CXR","slug":"CXR","link":"/blog/tags/CXR/"}],"categories":[{"name":"旅行","slug":"旅行","link":"/blog/categories/%E6%97%85%E8%A1%8C/"},{"name":"Projects","slug":"Projects","link":"/blog/categories/Projects/"},{"name":"其它","slug":"其它","link":"/blog/categories/%E5%85%B6%E5%AE%83/"}]}